import { translate } from "../src";

describe("HTML-Attribute-React", () => {
  test("translate supported attributes", () => {
    expect(translate("accept")).toBe("accept");
    expect(translate("accept-charset")).toBe("acceptCharset");
    expect(translate("accesskey")).toBe("accessKey");
    expect(translate("action")).toBe("action");
    expect(translate("allowfullscreen")).toBe("allowFullScreen");
    expect(translate("allowtransparency")).toBe("allowTransparency");
    expect(translate("alt")).toBe("alt");
    expect(translate("async")).toBe("async");
    expect(translate("autocomplete")).toBe("autoComplete");
    expect(translate("autofocus")).toBe("autoFocus");
    expect(translate("autoplay")).toBe("autoPlay");
    expect(translate("capture")).toBe("capture");
    expect(translate("cellpadding")).toBe("cellPadding");
    expect(translate("cellspacing")).toBe("cellSpacing");
    expect(translate("charset")).toBe("charSet");
    expect(translate("challenge")).toBe("challenge");
    expect(translate("checked")).toBe("checked");
    expect(translate("classid")).toBe("classID");
    expect(translate("class")).toBe("className");
    expect(translate("cols")).toBe("cols");
    expect(translate("colspan")).toBe("colSpan");
    expect(translate("content")).toBe("content");
    expect(translate("contenteditable")).toBe("contentEditable");
    expect(translate("contextmenu")).toBe("contextMenu");
    expect(translate("controls")).toBe("controls");
    expect(translate("coords")).toBe("coords");
    expect(translate("crossorigin")).toBe("crossOrigin");
    expect(translate("data")).toBe("data");
    expect(translate("datetime")).toBe("dateTime");
    expect(translate("defer")).toBe("defer");
    expect(translate("dir")).toBe("dir");
    expect(translate("disabled")).toBe("disabled");
    expect(translate("download")).toBe("download");
    expect(translate("draggable")).toBe("draggable");
    expect(translate("enctype")).toBe("encType");
    expect(translate("form")).toBe("form");
    expect(translate("formaction")).toBe("formAction");
    expect(translate("formenctype")).toBe("formEncType");
    expect(translate("formmethod")).toBe("formMethod");
    expect(translate("formnovalidate")).toBe("formNoValidate");
    expect(translate("formtarget")).toBe("formTarget");
    expect(translate("frameborder")).toBe("frameBorder");
    expect(translate("headers")).toBe("headers");
    expect(translate("height")).toBe("height");
    expect(translate("hidden")).toBe("hidden");
    expect(translate("high")).toBe("high");
    expect(translate("href")).toBe("href");
    expect(translate("hreflang")).toBe("hrefLang");
    expect(translate("for")).toBe("htmlFor");
    expect(translate("httpequiv")).toBe("httpEquiv");
    expect(translate("icon")).toBe("icon");
    expect(translate("id")).toBe("id");
    expect(translate("inputmode")).toBe("inputMode");
    expect(translate("keyparams")).toBe("keyParams");
    expect(translate("keytype")).toBe("keyType");
    expect(translate("label")).toBe("label");
    expect(translate("lang")).toBe("lang");
    expect(translate("list")).toBe("list");
    expect(translate("loop")).toBe("loop");
    expect(translate("low")).toBe("low");
    expect(translate("manifest")).toBe("manifest");
    expect(translate("marginheight")).toBe("marginHeight");
    expect(translate("marginwidth")).toBe("marginWidth");
    expect(translate("max")).toBe("max");
    expect(translate("maxlength")).toBe("maxLength");
    expect(translate("media")).toBe("media");
    expect(translate("mediagroup")).toBe("mediaGroup");
    expect(translate("method")).toBe("method");
    expect(translate("min")).toBe("min");
    expect(translate("minlength")).toBe("minLength");
    expect(translate("multiple")).toBe("multiple");
    expect(translate("muted")).toBe("muted");
    expect(translate("name")).toBe("name");
    expect(translate("novalidate")).toBe("noValidate");
    expect(translate("open")).toBe("open");
    expect(translate("optimum")).toBe("optimum");
    expect(translate("pattern")).toBe("pattern");
    expect(translate("placeholder")).toBe("placeholder");
    expect(translate("poster")).toBe("poster");
    expect(translate("preload")).toBe("preload");
    expect(translate("radiogroup")).toBe("radioGroup");
    expect(translate("readonly")).toBe("readOnly");
    expect(translate("rel")).toBe("rel");
    expect(translate("required")).toBe("required");
    expect(translate("role")).toBe("role");
    expect(translate("rows")).toBe("rows");
    expect(translate("rowspan")).toBe("rowSpan");
    expect(translate("sandbox")).toBe("sandbox");
    expect(translate("scope")).toBe("scope");
    expect(translate("scoped")).toBe("scoped");
    expect(translate("scrolling")).toBe("scrolling");
    expect(translate("seamless")).toBe("seamless");
    expect(translate("selected")).toBe("selected");
    expect(translate("shape")).toBe("shape");
    expect(translate("size")).toBe("size");
    expect(translate("sizes")).toBe("sizes");
    expect(translate("span")).toBe("span");
    expect(translate("spellcheck")).toBe("spellCheck");
    expect(translate("src")).toBe("src");
    expect(translate("srcdoc")).toBe("srcDoc");
    expect(translate("srcset")).toBe("srcSet");
    expect(translate("start")).toBe("start");
    expect(translate("step")).toBe("step");
    expect(translate("style")).toBe("style");
    expect(translate("summary")).toBe("summary");
    expect(translate("tabindex")).toBe("tabIndex");
    expect(translate("target")).toBe("target");
    expect(translate("title")).toBe("title");
    expect(translate("type")).toBe("type");
    expect(translate("usemap")).toBe("useMap");
    expect(translate("value")).toBe("value");
    expect(translate("width")).toBe("width");
    expect(translate("wmode")).toBe("wmode");
    expect(translate("wrap")).toBe("wrap");
    expect(translate("clippath")).toBe("clipPath");
    expect(translate("cx")).toBe("cx");
    expect(translate("cy")).toBe("cy");
    expect(translate("d")).toBe("d");
    expect(translate("dx")).toBe("dx");
    expect(translate("dy")).toBe("dy");
    expect(translate("fill")).toBe("fill");
    expect(translate("fillopacity")).toBe("fillOpacity");
    expect(translate("fontfamily")).toBe("fontFamily");
    expect(translate("fontsize")).toBe("fontSize");
    expect(translate("fx")).toBe("fx");
    expect(translate("fy")).toBe("fy");
    expect(translate("gradienttransform")).toBe("gradientTransform");
    expect(translate("gradientunits")).toBe("gradientUnits");
    expect(translate("markerend")).toBe("markerEnd");
    expect(translate("markermid")).toBe("markerMid");
    expect(translate("markerstart")).toBe("markerStart");
    expect(translate("offset")).toBe("offset");
    expect(translate("opacity")).toBe("opacity");
    expect(translate("patterncontentunits")).toBe("patternContentUnits");
    expect(translate("patternunits")).toBe("patternUnits");
    expect(translate("points")).toBe("points");
    expect(translate("preserveaspectratio")).toBe("preserveAspectRatio");
    expect(translate("r")).toBe("r");
    expect(translate("rx")).toBe("rx");
    expect(translate("ry")).toBe("ry");
    expect(translate("spreadmethod")).toBe("spreadMethod");
    expect(translate("stopcolor")).toBe("stopColor");
    expect(translate("stopopacity")).toBe("stopOpacity");
    expect(translate("stroke")).toBe("stroke");
    expect(translate("strokedasharray")).toBe("strokeDasharray");
    expect(translate("strokelinecap")).toBe("strokeLinecap");
    expect(translate("strokeopacity")).toBe("strokeOpacity");
    expect(translate("strokewidth")).toBe("strokeWidth");
    expect(translate("textanchor")).toBe("textAnchor");
    expect(translate("transform")).toBe("transform");
    expect(translate("version")).toBe("version");
    expect(translate("viewbox")).toBe("viewBox");
    expect(translate("x1")).toBe("x1");
    expect(translate("x2")).toBe("x2");
    expect(translate("x")).toBe("x");
    expect(translate("xlink:actuate")).toBe("xlinkActuate");
    expect(translate("xlink:arcrole")).toBe("xlinkArcrole");
    expect(translate("xlink:href")).toBe("xlinkHref");
    expect(translate("xlink:role")).toBe("xlinkRole");
    expect(translate("xlink:show")).toBe("xlinkShow");
    expect(translate("xlink:title")).toBe("xlinkTitle");
    expect(translate("xlink:type")).toBe("xlinkType");
    expect(translate("xml:base")).toBe("xmlBase");
    expect(translate("xml:lang")).toBe("xmlLang");
    expect(translate("xml:space")).toBe("xmlSpace");
    expect(translate("y1")).toBe("y1");
    expect(translate("y2")).toBe("y2");
    expect(translate("y")).toBe("y");
    expect(translate("oncopy")).toBe("onCopy");
    expect(translate("oncut")).toBe("onCut");
    expect(translate("onpaste")).toBe("onPaste");
    expect(translate("oncompositionend")).toBe("onCompositionEnd");
    expect(translate("oncompositionstart")).toBe("onCompositionStart");
    expect(translate("oncompositionupdate")).toBe("onCompositionUpdate");
    expect(translate("onkeydown")).toBe("onKeyDown");
    expect(translate("onkeypress")).toBe("onKeyPress");
    expect(translate("onkeyup")).toBe("onKeyUp");
    expect(translate("onfocus")).toBe("onFocus");
    expect(translate("onblur")).toBe("onBlur");
    expect(translate("onchange")).toBe("onChange");
    expect(translate("oninput")).toBe("onInput");
    expect(translate("onsubmit")).toBe("onSubmit");
    expect(translate("onclick")).toBe("onClick");
    expect(translate("oncontextmenu")).toBe("onContextMenu");
    expect(translate("ondoubleclick")).toBe("onDoubleClick");
    expect(translate("ondrag")).toBe("onDrag");
    expect(translate("ondragend")).toBe("onDragEnd");
    expect(translate("ondragenter")).toBe("onDragEnter");
    expect(translate("ondragexit")).toBe("onDragExit");
    expect(translate("ondragleave")).toBe("onDragLeave");
    expect(translate("ondragover")).toBe("onDragOver");
    expect(translate("ondragstart")).toBe("onDragStart");
    expect(translate("ondrop")).toBe("onDrop");
    expect(translate("onmousedown")).toBe("onMouseDown");
    expect(translate("onmouseenter")).toBe("onMouseEnter");
    expect(translate("onmouseleave")).toBe("onMouseLeave");
    expect(translate("onmousemove")).toBe("onMouseMove");
    expect(translate("onmouseout")).toBe("onMouseOut");
    expect(translate("onmouseover")).toBe("onMouseOver");
    expect(translate("onmouseup")).toBe("onMouseUp");
    expect(translate("onselect")).toBe("onSelect");
    expect(translate("ontouchcancel")).toBe("onTouchCancel");
    expect(translate("ontouchend")).toBe("onTouchEnd");
    expect(translate("ontouchmove")).toBe("onTouchMove");
    expect(translate("ontouchstart")).toBe("onTouchStart");
    expect(translate("onscroll")).toBe("onScroll");
    expect(translate("onwheel")).toBe("onWheel");
    expect(translate("onabort")).toBe("onAbort");
    expect(translate("oncanplay")).toBe("onCanPlay");
    expect(translate("oncanplaythrough")).toBe("onCanPlayThrough");
    expect(translate("ondurationchange")).toBe("onDurationChange");
    expect(translate("onemptied")).toBe("onEmptied");
    expect(translate("onencrypted")).toBe("onEncrypted");
    expect(translate("onended")).toBe("onEnded");
    expect(translate("onerror")).toBe("onError");
    expect(translate("onloadeddata")).toBe("onLoadedData");
    expect(translate("onloadedmetadata")).toBe("onLoadedMetadata");
    expect(translate("onloadstart")).toBe("onLoadStart");
    expect(translate("onpause")).toBe("onPause");
    expect(translate("onplay")).toBe("onPlay");
    expect(translate("onplaying")).toBe("onPlaying");
    expect(translate("onprogress")).toBe("onProgress");
    expect(translate("onratechange")).toBe("onRateChange");
    expect(translate("onseeked")).toBe("onSeeked");
    expect(translate("onseeking")).toBe("onSeeking");
    expect(translate("onstalled")).toBe("onStalled");
    expect(translate("onsuspend")).toBe("onSuspend");
    expect(translate("ontimeupdate")).toBe("onTimeUpdate");
    expect(translate("onvolumechange")).toBe("onVolumeChange");
    expect(translate("onwaiting")).toBe("onWaiting");
    expect(translate("onload")).toBe("onLoad");
    expect(translate("onerror")).toBe("onError");
  });

  test("translate supported attributes with capital letters", () => {
    expect(translate("ACCEPT")).toBe("accept");
    expect(translate("ACTION")).toBe("action");
    expect(translate("classID")).toBe("classID");
    expect(translate("CLAss")).toBe("className");
  });

  test("bypass unsupported attributes", () => {
    expect(translate("data-test")).toBe("data-test");
    expect(translate("aria-label")).toBe("aria-label");
    expect(translate("unsupported-attr")).toBe("unsupported-attr");
  });

  test("translate a list of attributes", () => {
    expect(
      translate([
        "class",
        "for",
        "data-test",
        "aria-label",
        "ACCEPT",
        "ACTION",
        "classID",
        "CLAss",
      ])
    ).toStrictEqual([
      "className",
      "htmlFor",
      "data-test",
      "aria-label",
      "accept",
      "action",
      "classID",
      "className",
    ]);
  });

  test("translate a record of attributes", () => {
    expect(
      translate({
        class: "abcd",
        for: "#id",
        "data-test": "data",
        classID: 1,
      })
    ).toStrictEqual({
      className: "abcd",
      htmlFor: "#id",
      "data-test": "data",
      classID: 1,
    });
  });
});
